{"version":3,"sources":["engine/engine.js","animation1.js","animation2.js","animation3.js","example.js"],"names":["scene","canvas","document","createElement","elements","math","randomIntFromRange","min","max","Math","random","randomColor","getDistance","x1","y1","x2","y2","xDistance","yDistance","sqrt","pow","clear","context","clearRect","width","height","animationClear","start","data","getContext","handleColor","color","drawRect","push","Rect","name","positionX","positionY","sizeX","sizeY","update","customVars","position","x","y","size","draw","fillStyle","fillRect","forEach","element","drawPath","Path","startPos","paths","beginPath","moveTo","path","lineTo","strokeStyle","stroke","drawArc","drawCounterClockWise","Arc","radius","startAng","endAng","fill","arc","drawText","Text","text","family","String","substr","lenth","font","fillText","console","log","getElementByName","foundElement","i","startAnimation","frameRate","animation","extras","setInterval","sceneParent","append","animation1","body","innerWidth","innerHeight","mouse","colorArray","window","addEventListener","e","ballCount","floor","vx","vy","minRadius","maxRadius","PI","length","animation2","bounciness","animation3","clientX","clientY","radians","velocity","distanceFromCenter","lastMouse","cos","sin","animations","onload"],"mappings":"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","file":"example.217ffedc.js","sourceRoot":"..","sourcesContent":["let scene = {\r\n    canvas: document.createElement('canvas'),\r\n    elements: [],\r\n    math: {\r\n        randomIntFromRange: (min, max) => {\r\n            return Math.random() * (max - min) + min;\r\n        },\r\n        randomColor: () => {\r\n            return `rgb(${Math.random() * 255}, ${Math.random() * 255}, ${\r\n                Math.random() * 255\r\n            }`;\r\n        },\r\n        getDistance: (x1, y1, x2, y2) => {\r\n            let xDistance = x2 - x1;\r\n            let yDistance = y2 - y1;\r\n\r\n            return Math.sqrt(Math.pow(xDistance, 2) + Math.pow(yDistance, 2));\r\n        },\r\n    },\r\n    clear: () => {\r\n        scene.context.clearRect(0, 0, scene.canvas.width, scene.canvas.height);\r\n    },\r\n    animationClear: () => {\r\n        scene.clear();\r\n    },\r\n    start: (data) => {\r\n        //setting up canvas\r\n        if (data.width != null) {\r\n            scene.canvas.width = data.width;\r\n        }\r\n        if (data.height != null) {\r\n            scene.canvas.height = data.height;\r\n        }\r\n        scene.context = scene.canvas.getContext('2d');\r\n        const context = scene.context;\r\n\r\n        //handling functions\r\n        scene.handleColor = (color) => {\r\n            return color == null || color === '' ? 'black' : color;\r\n        };\r\n        const handleColor = scene.handleColor;\r\n\r\n        //drawing functions\r\n        //drawing rectangle\r\n        scene.drawRect = (data) => {\r\n            function Rect(\r\n                name,\r\n                positionX,\r\n                positionY,\r\n                sizeX,\r\n                sizeY,\r\n                color,\r\n                update,\r\n                customVars\r\n            ) {\r\n                this.name = name;\r\n                this.position = { x: positionX, y: positionY };\r\n                this.size = { x: sizeX, y: sizeY };\r\n                this.color = handleColor(color);\r\n                this.customVars = customVars;\r\n\r\n                this.draw = () => {\r\n                    context.fillStyle = this.color;\r\n                    context.fillRect(\r\n                        this.position.x,\r\n                        this.position.y,\r\n                        this.size.x,\r\n                        this.size.y\r\n                    );\r\n                };\r\n\r\n                this.update =\r\n                    update == null\r\n                        ? () => {\r\n                              this.draw();\r\n                          }\r\n                        : update;\r\n            }\r\n\r\n            scene.elements.push(\r\n                new Rect(\r\n                    data.name,\r\n                    data.position.x,\r\n                    data.position.y,\r\n                    data.size.x,\r\n                    data.size.y,\r\n                    data.color,\r\n                    data.update,\r\n                    data.customVars\r\n                )\r\n            );\r\n\r\n            //drawing everything on the scene\r\n            scene.elements.forEach((element) => element.draw());\r\n        };\r\n\r\n        //drawing line\r\n        scene.drawPath = (data) => {\r\n            //handling color\r\n            data.color = handleColor(data.color);\r\n\r\n            function Path(name, startPos, paths, color, update, customVars) {\r\n                this.name = name;\r\n                this.startPos = startPos;\r\n                this.paths = paths;\r\n                this.color = color;\r\n                this.customVars = customVars;\r\n\r\n                this.draw = () => {\r\n                    context.beginPath();\r\n                    context.moveTo(startPos.x, startPos.y);\r\n                    data.paths.forEach((path) => {\r\n                        context.lineTo(path.x, path.y);\r\n                    });\r\n\r\n                    context.strokeStyle = color;\r\n\r\n                    context.stroke();\r\n                };\r\n\r\n                this.update =\r\n                    update == null\r\n                        ? () => {\r\n                              this.draw();\r\n                          }\r\n                        : update;\r\n            }\r\n\r\n            scene.elements.push(\r\n                new Path(\r\n                    data.name,\r\n                    data.startPos,\r\n                    data.paths,\r\n                    data.color,\r\n                    data.update,\r\n                    data.customVars\r\n                )\r\n            );\r\n\r\n            //drawing everything on the scene\r\n            scene.elements.forEach((element) => element.draw());\r\n        };\r\n\r\n        //drawing arc\r\n        scene.drawArc = (data) => {\r\n            data.drawCounterClockWise =\r\n                data.drawCounterClockWise == null\r\n                    ? false\r\n                    : data.drawCounterClockWise;\r\n\r\n            function Arc(\r\n                name,\r\n                position,\r\n                radius,\r\n                startAng,\r\n                endAng,\r\n                drawCounterClockWise,\r\n                color,\r\n                fill,\r\n                update,\r\n                customVars\r\n            ) {\r\n                this.name = name;\r\n                this.position = position;\r\n                this.radius = radius;\r\n                this.startAng = startAng;\r\n                this.endAng = endAng;\r\n                this.drawCounterClockWise = drawCounterClockWise;\r\n                this.color = color;\r\n                this.fill = fill;\r\n                this.customVars = customVars;\r\n\r\n                this.draw = () => {\r\n                    context.beginPath();\r\n                    context.arc(\r\n                        this.position.x,\r\n                        this.position.y,\r\n                        this.radius,\r\n                        this.startAng,\r\n                        this.endAng,\r\n                        this.drawCounterClockWise\r\n                    );\r\n                    if (this.color != null) {\r\n                        context.strokeStyle = this.color;\r\n                        context.stroke();\r\n                    }\r\n                    if (this.fill != null) {\r\n                        context.fillStyle = this.fill;\r\n                        context.fill();\r\n                    }\r\n                };\r\n\r\n                this.update =\r\n                    update == null\r\n                        ? () => {\r\n                              this.draw();\r\n                          }\r\n                        : update;\r\n            }\r\n\r\n            scene.elements.push(\r\n                new Arc(\r\n                    data.name,\r\n                    data.position,\r\n                    data.radius,\r\n                    data.startAng,\r\n                    data.endAng,\r\n                    data.drawCounterClockWise,\r\n                    data.color,\r\n                    data.fill,\r\n                    data.update,\r\n                    data.customVars\r\n                )\r\n            );\r\n\r\n            //drawing everything on the scene\r\n            scene.elements.forEach((element) => element.draw());\r\n        };\r\n\r\n        //drawing text\r\n        scene.drawText = (data) => {\r\n            function Text(\r\n                name,\r\n                position,\r\n                text,\r\n                size,\r\n                family,\r\n                color,\r\n                update,\r\n                customVars\r\n            ) {\r\n                this.name = name;\r\n                this.position = position;\r\n                this.text = text;\r\n                this.size =\r\n                    String(size).substr(String(size).lenth - 2) === 'px'\r\n                        ? String(size)\r\n                        : `${size}px`;\r\n                this.family = family == null ? 'Arial' : family;\r\n                this.color = scene.handleColor(color);\r\n                this.customVars = customVars;\r\n\r\n                this.draw = () => {\r\n                    context.font = `${this.size} ${this.family}`;\r\n                    context.fillStyle = this.color;\r\n                    context.fillText(\r\n                        this.text,\r\n                        this.position.x,\r\n                        this.position.y\r\n                    );\r\n                };\r\n\r\n                this.update =\r\n                    update == null\r\n                        ? () => {\r\n                              this.draw();\r\n                          }\r\n                        : update;\r\n\r\n                console.log(this);\r\n            }\r\n\r\n            scene.elements.push(\r\n                new Text(\r\n                    data.name,\r\n                    data.position,\r\n                    data.text,\r\n                    data.size,\r\n                    data.family,\r\n                    data.color,\r\n                    data.update,\r\n                    data.customVars\r\n                )\r\n            );\r\n\r\n            //drawing everything on the scene\r\n            scene.elements.forEach((element) => element.draw());\r\n        };\r\n\r\n        //finding functions\r\n        scene.getElementByName = (name) => {\r\n            let foundElement = false;\r\n            let i = 0;\r\n\r\n            scene.elements.forEach((element) => {\r\n                if (element.name === name) {\r\n                    foundElement = true;\r\n                } else if (foundElement === false) {\r\n                    i++;\r\n                }\r\n            });\r\n\r\n            if (foundElement === true) {\r\n                return scene.elements[i];\r\n            } else {\r\n                return null;\r\n            }\r\n        };\r\n\r\n        //animation functions\r\n        scene.startAnimation = (frameRate, animation, extras) => {\r\n            setInterval(() => {\r\n                if (extras === true || extras == null) {\r\n                    scene.animationClear();\r\n                    if (animation != null) {\r\n                        animation();\r\n                    }\r\n                    //drawing everything on the scene\r\n                    scene.elements.forEach((element) =>\r\n                        element.update(element)\r\n                    );\r\n                } else {\r\n                    if (animation != null) {\r\n                        animation();\r\n                    }\r\n                }\r\n            }, 1000 / frameRate);\r\n        };\r\n\r\n        //appending canvas into the DOM\r\n        data.sceneParent.append(scene.canvas);\r\n    },\r\n};\r\n\r\nexport default scene;\r\n","import scene from './engine/engine.js';\r\n\r\nexport default function animation1() {\r\n    scene.start({\r\n        sceneParent: document.body,\r\n        width: innerWidth,\r\n        height: innerHeight,\r\n    });\r\n\r\n    let mouse = {\r\n        x: -100,\r\n        y: -100,\r\n    };\r\n\r\n    const colorArray = ['#d9d2ea', '#4c0490', '#36026a', '#6206b6', '#7b6b92'];\r\n\r\n    window.addEventListener('mousemove', (e) => {\r\n        mouse.x = e.x;\r\n        mouse.y = e.y;\r\n    });\r\n\r\n    const ballCount = Math.floor(innerWidth / 2);\r\n\r\n    for (let i = 0; ballCount > i; i++) {\r\n        let vx = (Math.random() - 0.5) * 2;\r\n        let vy = (Math.random() - 0.5) * 2;\r\n        let minRadius = scene.math.randomIntFromRange(2, 8);\r\n        let maxRadius = scene.math.randomIntFromRange(20, 30);\r\n        let interactionDistance = 50;\r\n        let mass = 1;\r\n\r\n        scene.drawArc({\r\n            position: {\r\n                x: scene.math.randomIntFromRange(30, scene.canvas.width - 30),\r\n                y: scene.math.randomIntFromRange(30, scene.canvas.height - 30),\r\n            },\r\n            radius: minRadius,\r\n            startAng: 0,\r\n            endAng: Math.PI * 2,\r\n            fill: colorArray[Math.floor(Math.random() * colorArray.length)],\r\n            update: (element) => {\r\n                if (\r\n                    element.position.x + element.radius > scene.canvas.width ||\r\n                    element.position.x - element.radius < 0\r\n                ) {\r\n                    vx = -vx;\r\n                }\r\n                if (\r\n                    element.position.y + element.radius > scene.canvas.height ||\r\n                    element.position.y - element.radius < 0\r\n                ) {\r\n                    vy = -vy;\r\n                }\r\n\r\n                element.position.x += vx;\r\n                element.position.y += vy;\r\n\r\n                //interaction\r\n                if (\r\n                    mouse.x - element.position.x < interactionDistance &&\r\n                    mouse.x - element.position.x > -interactionDistance &&\r\n                    mouse.y - element.position.y < interactionDistance &&\r\n                    mouse.y - element.position.y > -interactionDistance &&\r\n                    element.radius < maxRadius\r\n                ) {\r\n                    element.radius++;\r\n                } else if (element.radius > minRadius) {\r\n                    element.radius--;\r\n                }\r\n\r\n                element.draw();\r\n            },\r\n        });\r\n    }\r\n\r\n    scene.startAnimation(60, () => {\r\n        scene.canvas.width = innerWidth;\r\n        scene.canvas.height = innerHeight;\r\n    });\r\n}\r\n","import scene from './engine/engine.js';\r\n\r\nexport default function animation2() {\r\n    scene.start({\r\n        sceneParent: document.body,\r\n        width: innerWidth,\r\n        height: innerHeight,\r\n    });\r\n\r\n    const colorArray = ['#d9d2ea', '#4c0490', '#36026a', '#6206b6', '#7b6b92'];\r\n    const ballCount = Math.floor(innerWidth / 5);\r\n\r\n    for (let i = 0; i < ballCount; i++) {\r\n        let vy = 1;\r\n        let vx = (Math.random() - 0.5) * 10;\r\n        let gravity = 1;\r\n        let bounciness = 0.99 + Math.random() / 100;\r\n\r\n        scene.drawArc({\r\n            position: {\r\n                x: scene.math.randomIntFromRange(30, scene.canvas.width - 30),\r\n                y: scene.math.randomIntFromRange(30, scene.canvas.height - 30),\r\n            },\r\n            radius: scene.math.randomIntFromRange(20, 40),\r\n            startAng: 0,\r\n            endAng: Math.PI * 2,\r\n            color: 'black',\r\n            fill: colorArray[Math.floor(Math.random() * colorArray.length)],\r\n            update: (element) => {\r\n                if (\r\n                    element.position.y + element.radius + vy >\r\n                    scene.canvas.height\r\n                ) {\r\n                    vy = -vy * bounciness;\r\n                } else {\r\n                    vy += gravity;\r\n                }\r\n\r\n                if (\r\n                    element.position.x + element.radius + vx >\r\n                        scene.canvas.width ||\r\n                    element.position.x - element.radius + vx < 0\r\n                ) {\r\n                    vx = -vx;\r\n                }\r\n\r\n                element.position.x += vx;\r\n                element.position.y += vy;\r\n                element.draw();\r\n            },\r\n        });\r\n    }\r\n\r\n    scene.startAnimation(60, () => {\r\n        scene.canvas.width = innerWidth;\r\n        scene.canvas.height = innerHeight;\r\n    });\r\n}\r\n","import scene from './engine/engine.js';\r\n\r\nexport default function animation3() {\r\n    scene.start({\r\n        sceneParent: document.body,\r\n        width: innerWidth,\r\n        height: innerHeight,\r\n    });\r\n\r\n    window.addEventListener('mousemove', (e) => {\r\n        mouse.x = e.clientX;\r\n        mouse.y = e.clientY;\r\n    });\r\n\r\n    let mouse = {\r\n        x: scene.canvas.width / 2,\r\n        y: scene.canvas.height / 2,\r\n    };\r\n\r\n    const colorArray = ['#d9d2ea', '#4c0490', '#36026a', '#6206b6', '#7b6b92'];\r\n    const ballCount = innerWidth / 20;\r\n\r\n    for (let i = 0; i < ballCount; i++) {\r\n        scene.drawArc({\r\n            position: { x: scene.canvas.width / 2, y: scene.canvas.height / 2 },\r\n            radius: scene.math.randomIntFromRange(5, 8),\r\n            startAng: 0,\r\n            endAng: Math.PI * 2,\r\n            customVars: {\r\n                radians: Math.random() * Math.PI * 2,\r\n                velocity: 0.01,\r\n                distanceFromCenter: scene.math.randomIntFromRange(\r\n                    20,\r\n                    innerWidth / 2\r\n                ),\r\n                lastMouse: {\r\n                    x: scene.canvas.width / 2,\r\n                    y: scene.canvas.height / 2,\r\n                },\r\n            },\r\n            fill: colorArray[Math.floor(Math.random() * colorArray.length)],\r\n            update: (element) => {\r\n                //smoothing mouse animation\r\n                element.customVars.lastMouse.x +=\r\n                    (mouse.x - element.customVars.lastMouse.x) * 0.05;\r\n\r\n                element.customVars.lastMouse.y +=\r\n                    (mouse.y - element.customVars.lastMouse.y) * 0.05;\r\n\r\n                //move points overtime in a circular motion\r\n                element.customVars.radians += element.customVars.velocity;\r\n\r\n                element.position.x =\r\n                    element.customVars.lastMouse.x +\r\n                    Math.cos(element.customVars.radians) *\r\n                        element.customVars.distanceFromCenter;\r\n                element.position.y =\r\n                    element.customVars.lastMouse.y +\r\n                    Math.sin(element.customVars.radians) *\r\n                        element.customVars.distanceFromCenter;\r\n\r\n                element.draw();\r\n            },\r\n        });\r\n    }\r\n\r\n    scene.drawRect({\r\n        name: 'fadingEffect',\r\n        position: { x: 0, y: 0 },\r\n        size: { x: scene.canvas.width, y: scene.canvas.height },\r\n        color: 'rgba(255,255,255, 0.05)',\r\n    });\r\n\r\n    scene.startAnimation(\r\n        300,\r\n        () => {\r\n            scene.elements.forEach((element) => element.update(element));\r\n        },\r\n        false\r\n    );\r\n}\r\n","import animation1 from './animation1.js';\r\nimport animation2 from './animation2.js';\r\nimport animation3 from './animation3.js';\r\n\r\nconst animations = [animation1, animation2, animation3];\r\n\r\nwindow.onload = animations[Math.floor(Math.random() * animations.length)];\r\n"]}