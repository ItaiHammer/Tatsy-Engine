{"version":3,"sources":["animationCount.js","engine/engine.js","animation1.js","animation2.js","animation3.js","animation4.js","animation5.js","examples.js"],"names":["animationCount","animationAmount","shownAnimationArray","localStorage","getItem","split","text","length","document","querySelector","animationCountText","querySelectorAll","innerHTML","forEach","element","style","opacity","color","console","log","scene","canvas","createElement","elements","math","randomIntFromRange","min","max","Math","random","randomColor","getDistance","x1","y1","x2","y2","xDistance","yDistance","sqrt","pow","clear","context","clearRect","width","height","animationClear","start","data","getContext","handleColor","id","drawRect","push","Rect","name","positionX","positionY","sizeX","sizeY","update","customVars","position","x","y","size","draw","fillStyle","fillRect","delete","foundElement","index","splice","drawPath","Path","startPos","paths","beginPath","moveTo","path","lineTo","strokeStyle","stroke","drawArc","drawCounterClockWise","Arc","radius","startAng","endAng","fill","arc","drawText","Text","family","String","substr","lenth","font","fillText","getElementByName","i","getElementById","startAnimation","frameRate","animation","extras","setInterval","sceneParent","append","animation1","animationNum","hasAnimaitonBeenSeen","setItem","body","innerWidth","innerHeight","mouse","colorArray","window","addEventListener","e","ballCount","floor","vx","vy","minRadius","maxRadius","PI","animation2","bounciness","animation3","clientX","clientY","radians","velocity","distanceFromCenter","lastMouse","cos","sin","animation4","animation5","bounceTimer","animations","onLoad","onload"],"mappings":"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","file":"examples.ad0c3274.js","sourceRoot":"..","sourcesContent":["export default function animationCount(animationAmount) {\r\n    const shownAnimationArray = localStorage.getItem('animations').split('&');\r\n    const text = `${\r\n        typeof shownAnimationArray === 'string' ? 1 : shownAnimationArray.length\r\n    }/${animationAmount}`;\r\n\r\n    const animationCount = document.querySelector('#animation-count');\r\n    const animationCountText = document.querySelectorAll(\r\n        '#animation-count-text'\r\n    );\r\n\r\n    animationCount.innerHTML = text;\r\n    animationCountText.forEach((element) => (element.style.opacity = 1));\r\n\r\n    if (\r\n        typeof shownAnimationArray === 'string'\r\n            ? 1\r\n            : shownAnimationArray.length === animationAmount\r\n    ) {\r\n        animationCount.style.color = '#CBBC93';\r\n    }\r\n\r\n    console.log(localStorage.getItem('animations').split('&'));\r\n}\r\n","let scene = {\r\n    canvas: document.createElement('canvas'),\r\n    elements: [],\r\n    math: {\r\n        randomIntFromRange: (min, max) => {\r\n            return Math.random() * (max - min) + min;\r\n        },\r\n        randomColor: () => {\r\n            return `rgb(${Math.random() * 255}, ${Math.random() * 255}, ${\r\n                Math.random() * 255\r\n            }`;\r\n        },\r\n        getDistance: (x1, y1, x2, y2) => {\r\n            let xDistance = x2 - x1;\r\n            let yDistance = y2 - y1;\r\n\r\n            return Math.sqrt(Math.pow(xDistance, 2) + Math.pow(yDistance, 2));\r\n        },\r\n    },\r\n    clear: () => {\r\n        scene.context.clearRect(0, 0, scene.canvas.width, scene.canvas.height);\r\n    },\r\n    animationClear: () => {\r\n        scene.clear();\r\n    },\r\n    start: (data) => {\r\n        //setting up canvas\r\n        if (data.width != null) {\r\n            scene.canvas.width = data.width;\r\n        }\r\n        if (data.height != null) {\r\n            scene.canvas.height = data.height;\r\n        }\r\n        scene.context = scene.canvas.getContext('2d');\r\n        const context = scene.context;\r\n\r\n        //handling functions\r\n        scene.handleColor = (color) => {\r\n            return color == null || color === '' ? 'black' : color;\r\n        };\r\n        const handleColor = scene.handleColor;\r\n\r\n        let id = 0;\r\n\r\n        //drawing functions\r\n        //drawing rectangle\r\n        scene.drawRect = (data) => {\r\n            function Rect(\r\n                name,\r\n                positionX,\r\n                positionY,\r\n                sizeX,\r\n                sizeY,\r\n                color,\r\n                update,\r\n                customVars\r\n            ) {\r\n                this.name = name;\r\n                this.position = { x: positionX, y: positionY };\r\n                this.size = { x: sizeX, y: sizeY };\r\n                this.color = handleColor(color);\r\n                this.customVars = customVars;\r\n\r\n                this.id = id;\r\n                id += 1;\r\n\r\n                this.draw = () => {\r\n                    context.fillStyle = this.color;\r\n                    context.fillRect(\r\n                        this.position.x,\r\n                        this.position.y,\r\n                        this.size.x,\r\n                        this.size.y\r\n                    );\r\n                };\r\n\r\n                this.update =\r\n                    update == null\r\n                        ? () => {\r\n                              this.draw();\r\n                          }\r\n                        : update;\r\n\r\n                this.delete = () => {\r\n                    let foundElement = false;\r\n                    let index = 0;\r\n                    scene.elements.forEach((element) => {\r\n                        if (element.id === this.id || foundElement === true) {\r\n                            foundElement = true;\r\n                        } else {\r\n                            index++;\r\n                        }\r\n                    });\r\n\r\n                    scene.elements.splice(index, 1);\r\n                };\r\n            }\r\n\r\n            scene.elements.push(\r\n                new Rect(\r\n                    data.name,\r\n                    data.position.x,\r\n                    data.position.y,\r\n                    data.size.x,\r\n                    data.size.y,\r\n                    data.color,\r\n                    data.update,\r\n                    data.customVars\r\n                )\r\n            );\r\n\r\n            //drawing everything on the scene\r\n            scene.elements.forEach((element) => element.draw());\r\n        };\r\n\r\n        //drawing line\r\n        scene.drawPath = (data) => {\r\n            //handling color\r\n            data.color = handleColor(data.color);\r\n\r\n            function Path(name, startPos, paths, color, update, customVars) {\r\n                this.name = name;\r\n                this.startPos = startPos;\r\n                this.paths = paths;\r\n                this.color = color;\r\n                this.customVars = customVars;\r\n\r\n                this.id = id;\r\n                id += 1;\r\n\r\n                this.draw = () => {\r\n                    context.beginPath();\r\n                    context.moveTo(startPos.x, startPos.y);\r\n                    data.paths.forEach((path) => {\r\n                        context.lineTo(path.x, path.y);\r\n                    });\r\n\r\n                    context.strokeStyle = color;\r\n\r\n                    context.stroke();\r\n                };\r\n\r\n                this.update =\r\n                    update == null\r\n                        ? () => {\r\n                              this.draw();\r\n                          }\r\n                        : update;\r\n\r\n                this.delete = () => {\r\n                    let foundElement = false;\r\n                    let index = 0;\r\n                    scene.elements.forEach((element) => {\r\n                        if (element.id === this.id || foundElement === true) {\r\n                            foundElement = true;\r\n                        } else {\r\n                            index++;\r\n                        }\r\n                    });\r\n\r\n                    scene.elements.splice(index, 1);\r\n                };\r\n            }\r\n\r\n            scene.elements.push(\r\n                new Path(\r\n                    data.name,\r\n                    data.startPos,\r\n                    data.paths,\r\n                    data.color,\r\n                    data.update,\r\n                    data.customVars\r\n                )\r\n            );\r\n\r\n            //drawing everything on the scene\r\n            scene.elements.forEach((element) => element.draw());\r\n        };\r\n\r\n        //drawing arc\r\n        scene.drawArc = (data) => {\r\n            data.drawCounterClockWise =\r\n                data.drawCounterClockWise == null\r\n                    ? false\r\n                    : data.drawCounterClockWise;\r\n\r\n            function Arc(\r\n                name,\r\n                position,\r\n                radius,\r\n                startAng,\r\n                endAng,\r\n                drawCounterClockWise,\r\n                color,\r\n                fill,\r\n                update,\r\n                customVars\r\n            ) {\r\n                this.name = name;\r\n                this.position = position;\r\n                this.radius = radius;\r\n                this.startAng = startAng;\r\n                this.endAng = endAng;\r\n                this.drawCounterClockWise = drawCounterClockWise;\r\n                this.color = color;\r\n                this.fill = fill;\r\n                this.customVars = customVars;\r\n\r\n                this.id = id;\r\n                id += 1;\r\n\r\n                this.draw = () => {\r\n                    context.beginPath();\r\n                    context.arc(\r\n                        this.position.x,\r\n                        this.position.y,\r\n                        this.radius,\r\n                        this.startAng,\r\n                        this.endAng,\r\n                        this.drawCounterClockWise\r\n                    );\r\n                    if (this.color != null) {\r\n                        context.strokeStyle = this.color;\r\n                        context.stroke();\r\n                    }\r\n                    if (this.fill != null) {\r\n                        context.fillStyle = this.fill;\r\n                        context.fill();\r\n                    }\r\n                };\r\n\r\n                this.update =\r\n                    update == null\r\n                        ? () => {\r\n                              this.draw();\r\n                          }\r\n                        : update;\r\n\r\n                this.delete = () => {\r\n                    let foundElement = false;\r\n                    let index = 0;\r\n                    scene.elements.forEach((element) => {\r\n                        if (element.id === this.id || foundElement === true) {\r\n                            foundElement = true;\r\n                        } else {\r\n                            index++;\r\n                        }\r\n                    });\r\n\r\n                    scene.elements.splice(index, 1);\r\n                };\r\n            }\r\n\r\n            scene.elements.push(\r\n                new Arc(\r\n                    data.name,\r\n                    data.position,\r\n                    data.radius,\r\n                    data.startAng,\r\n                    data.endAng,\r\n                    data.drawCounterClockWise,\r\n                    data.color,\r\n                    data.fill,\r\n                    data.update,\r\n                    data.customVars\r\n                )\r\n            );\r\n\r\n            //drawing everything on the scene\r\n            scene.elements.forEach((element) => element.draw());\r\n        };\r\n\r\n        //drawing text\r\n        scene.drawText = (data) => {\r\n            function Text(\r\n                name,\r\n                position,\r\n                text,\r\n                size,\r\n                family,\r\n                color,\r\n                update,\r\n                customVars\r\n            ) {\r\n                this.name = name;\r\n                this.position = position;\r\n                this.text = text;\r\n                this.size =\r\n                    String(size).substr(String(size).lenth - 2) === 'px'\r\n                        ? String(size)\r\n                        : `${size}px`;\r\n                this.family = family == null ? 'Arial' : family;\r\n                this.color = scene.handleColor(color);\r\n                this.customVars = customVars;\r\n\r\n                this.id = id;\r\n                id += 1;\r\n\r\n                this.draw = () => {\r\n                    context.font = `${this.size} ${this.family}`;\r\n                    context.fillStyle = this.color;\r\n                    context.fillText(\r\n                        this.text,\r\n                        this.position.x,\r\n                        this.position.y\r\n                    );\r\n                };\r\n\r\n                this.update =\r\n                    update == null\r\n                        ? () => {\r\n                              this.draw();\r\n                          }\r\n                        : update;\r\n\r\n                this.delete = () => {\r\n                    let foundElement = false;\r\n                    let index = 0;\r\n                    scene.elements.forEach((element) => {\r\n                        if (element.id === this.id || foundElement === true) {\r\n                            foundElement = true;\r\n                        } else {\r\n                            index++;\r\n                        }\r\n                    });\r\n\r\n                    scene.elements.splice(index, 1);\r\n                };\r\n            }\r\n\r\n            scene.elements.push(\r\n                new Text(\r\n                    data.name,\r\n                    data.position,\r\n                    data.text,\r\n                    data.size,\r\n                    data.family,\r\n                    data.color,\r\n                    data.update,\r\n                    data.customVars\r\n                )\r\n            );\r\n\r\n            //drawing everything on the scene\r\n            scene.elements.forEach((element) => element.draw());\r\n        };\r\n\r\n        //finding functions\r\n        scene.getElementByName = (name) => {\r\n            let foundElement = false;\r\n            let i = 0;\r\n\r\n            scene.elements.forEach((element) => {\r\n                if (element.name === name) {\r\n                    foundElement = true;\r\n                } else if (foundElement === false) {\r\n                    i++;\r\n                }\r\n            });\r\n\r\n            if (foundElement === true) {\r\n                return scene.elements[i];\r\n            } else {\r\n                return null;\r\n            }\r\n        };\r\n\r\n        scene.getElementById = (id) => {\r\n            let foundElement = false;\r\n            let i = 0;\r\n\r\n            scene.elements.forEach((element) => {\r\n                if (element.id === id) {\r\n                    foundElement = true;\r\n                } else if (foundElement === false) {\r\n                    i++;\r\n                }\r\n            });\r\n\r\n            if (foundElement === true) {\r\n                return scene.elements[i];\r\n            } else {\r\n                return null;\r\n            }\r\n        };\r\n\r\n        //animation functions\r\n        scene.startAnimation = (frameRate, animation, extras) => {\r\n            setInterval(() => {\r\n                if (extras === true || extras == null) {\r\n                    scene.animationClear();\r\n                    if (animation != null) {\r\n                        animation();\r\n                    }\r\n                    //drawing everything on the scene\r\n                    scene.elements.forEach((element) =>\r\n                        element.update(element)\r\n                    );\r\n                } else {\r\n                    if (animation != null) {\r\n                        animation();\r\n                    }\r\n                }\r\n            }, 1000 / frameRate);\r\n        };\r\n\r\n        //appending canvas into the DOM\r\n        data.sceneParent.append(scene.canvas);\r\n    },\r\n};\r\n\r\nexport default scene;\r\n","import scene from './engine/engine.js';\r\n\r\nexport default function animation1() {\r\n    const animationNum = 1;\r\n    console.log(`Animation ${animationNum}`);\r\n    let hasAnimaitonBeenSeen = false;\r\n    localStorage\r\n        .getItem('animations')\r\n        .split('&')\r\n        .forEach((animation) => {\r\n            if (animation === `${animationNum}`) {\r\n                hasAnimaitonBeenSeen = true;\r\n            }\r\n        });\r\n    if (\r\n        localStorage.getItem('animations') == null ||\r\n        localStorage.getItem('animations') === ''\r\n    ) {\r\n        localStorage.setItem('animations', animationNum);\r\n    } else if (!hasAnimaitonBeenSeen) {\r\n        localStorage.setItem(\r\n            'animations',\r\n            `${localStorage.getItem('animations')}&${animationNum}`\r\n        );\r\n    }\r\n\r\n    scene.start({\r\n        sceneParent: document.body,\r\n        width: innerWidth,\r\n        height: innerHeight,\r\n    });\r\n\r\n    let mouse = {\r\n        x: -100,\r\n        y: -100,\r\n    };\r\n\r\n    const colorArray = ['#d9d2ea', '#4c0490', '#36026a', '#6206b6', '#7b6b92'];\r\n\r\n    window.addEventListener('mousemove', (e) => {\r\n        mouse.x = e.x;\r\n        mouse.y = e.y;\r\n    });\r\n\r\n    const ballCount = Math.floor(innerWidth / 2);\r\n\r\n    for (let i = 0; ballCount > i; i++) {\r\n        let vx = (Math.random() - 0.5) * 2;\r\n        let vy = (Math.random() - 0.5) * 2;\r\n        let minRadius = scene.math.randomIntFromRange(2, 8);\r\n        let maxRadius = scene.math.randomIntFromRange(20, 30);\r\n        let interactionDistance = 50;\r\n        let mass = 1;\r\n\r\n        scene.drawArc({\r\n            position: {\r\n                x: scene.math.randomIntFromRange(30, scene.canvas.width - 30),\r\n                y: scene.math.randomIntFromRange(30, scene.canvas.height - 30),\r\n            },\r\n            radius: minRadius,\r\n            startAng: 0,\r\n            endAng: Math.PI * 2,\r\n            fill: colorArray[Math.floor(Math.random() * colorArray.length)],\r\n            update: (element) => {\r\n                if (\r\n                    element.position.x + element.radius > scene.canvas.width ||\r\n                    element.position.x - element.radius < 0\r\n                ) {\r\n                    vx = -vx;\r\n                }\r\n                if (\r\n                    element.position.y + element.radius > scene.canvas.height ||\r\n                    element.position.y - element.radius < 0\r\n                ) {\r\n                    vy = -vy;\r\n                }\r\n\r\n                element.position.x += vx;\r\n                element.position.y += vy;\r\n\r\n                //interaction\r\n                if (\r\n                    mouse.x - element.position.x < interactionDistance &&\r\n                    mouse.x - element.position.x > -interactionDistance &&\r\n                    mouse.y - element.position.y < interactionDistance &&\r\n                    mouse.y - element.position.y > -interactionDistance &&\r\n                    element.radius < maxRadius\r\n                ) {\r\n                    element.radius++;\r\n                } else if (element.radius > minRadius) {\r\n                    element.radius--;\r\n                }\r\n\r\n                element.draw();\r\n            },\r\n        });\r\n    }\r\n\r\n    scene.startAnimation(60, () => {\r\n        scene.canvas.width = innerWidth;\r\n        scene.canvas.height = innerHeight;\r\n    });\r\n}\r\n","import scene from './engine/engine.js';\r\n\r\nexport default function animation2() {\r\n    const animationNum = 2;\r\n    console.log(`Animation ${animationNum}`);\r\n    let hasAnimaitonBeenSeen = false;\r\n    localStorage\r\n        .getItem('animations')\r\n        .split('&')\r\n        .forEach((animation) => {\r\n            if (animation === `${animationNum}`) {\r\n                hasAnimaitonBeenSeen = true;\r\n            }\r\n        });\r\n    if (\r\n        localStorage.getItem('animations') == null ||\r\n        localStorage.getItem('animations') === ''\r\n    ) {\r\n        localStorage.setItem('animations', animationNum);\r\n    } else if (!hasAnimaitonBeenSeen) {\r\n        localStorage.setItem(\r\n            'animations',\r\n            `${localStorage.getItem('animations')}&${animationNum}`\r\n        );\r\n    }\r\n\r\n    scene.start({\r\n        sceneParent: document.body,\r\n        width: innerWidth,\r\n        height: innerHeight,\r\n    });\r\n\r\n    const colorArray = ['#d9d2ea', '#4c0490', '#36026a', '#6206b6', '#7b6b92'];\r\n    const ballCount = Math.floor(innerWidth / 5);\r\n\r\n    for (let i = 0; i < ballCount; i++) {\r\n        let vy = 1;\r\n        let vx = (Math.random() - 0.5) * 10;\r\n        let gravity = 1;\r\n        let bounciness = 0.99 + Math.random() / 100;\r\n\r\n        scene.drawArc({\r\n            position: {\r\n                x: scene.math.randomIntFromRange(30, scene.canvas.width - 30),\r\n                y: scene.math.randomIntFromRange(30, scene.canvas.height - 30),\r\n            },\r\n            radius: scene.math.randomIntFromRange(20, 40),\r\n            startAng: 0,\r\n            endAng: Math.PI * 2,\r\n            color: 'black',\r\n            fill: colorArray[Math.floor(Math.random() * colorArray.length)],\r\n            update: (element) => {\r\n                if (\r\n                    element.position.y + element.radius + vy >\r\n                    scene.canvas.height\r\n                ) {\r\n                    vy = -vy * bounciness;\r\n                } else {\r\n                    vy += gravity;\r\n                }\r\n\r\n                if (\r\n                    element.position.x + element.radius + vx >\r\n                        scene.canvas.width ||\r\n                    element.position.x - element.radius + vx < 0\r\n                ) {\r\n                    vx = -vx;\r\n                }\r\n\r\n                element.position.x += vx;\r\n                element.position.y += vy;\r\n                element.draw();\r\n            },\r\n        });\r\n    }\r\n\r\n    scene.startAnimation(60, () => {\r\n        scene.canvas.width = innerWidth;\r\n        scene.canvas.height = innerHeight;\r\n    });\r\n}\r\n","import scene from './engine/engine.js';\r\n\r\nexport default function animation3() {\r\n    const animationNum = 3;\r\n    console.log(`Animation ${animationNum}`);\r\n    let hasAnimaitonBeenSeen = false;\r\n    localStorage\r\n        .getItem('animations')\r\n        .split('&')\r\n        .forEach((animation) => {\r\n            if (animation === `${animationNum}`) {\r\n                hasAnimaitonBeenSeen = true;\r\n            }\r\n        });\r\n    if (\r\n        localStorage.getItem('animations') == null ||\r\n        localStorage.getItem('animations') === ''\r\n    ) {\r\n        localStorage.setItem('animations', animationNum);\r\n    } else if (!hasAnimaitonBeenSeen) {\r\n        localStorage.setItem(\r\n            'animations',\r\n            `${localStorage.getItem('animations')}&${animationNum}`\r\n        );\r\n    }\r\n\r\n    scene.start({\r\n        sceneParent: document.body,\r\n        width: innerWidth,\r\n        height: innerHeight,\r\n    });\r\n\r\n    window.addEventListener('mousemove', (e) => {\r\n        mouse.x = e.clientX;\r\n        mouse.y = e.clientY;\r\n    });\r\n\r\n    let mouse = {\r\n        x: scene.canvas.width / 2,\r\n        y: scene.canvas.height / 2,\r\n    };\r\n\r\n    const colorArray = ['#d9d2ea', '#4c0490', '#36026a', '#6206b6', '#7b6b92'];\r\n    const ballCount = innerWidth / 20;\r\n\r\n    for (let i = 0; i < ballCount; i++) {\r\n        scene.drawArc({\r\n            position: { x: scene.canvas.width / 2, y: scene.canvas.height / 2 },\r\n            radius: scene.math.randomIntFromRange(5, 8),\r\n            startAng: 0,\r\n            endAng: Math.PI * 2,\r\n            customVars: {\r\n                radians: Math.random() * Math.PI * 2,\r\n                velocity: 0.01,\r\n                distanceFromCenter: scene.math.randomIntFromRange(\r\n                    20,\r\n                    innerWidth / 2\r\n                ),\r\n                lastMouse: {\r\n                    x: scene.canvas.width / 2,\r\n                    y: scene.canvas.height / 2,\r\n                },\r\n            },\r\n            fill: colorArray[Math.floor(Math.random() * colorArray.length)],\r\n            update: (element) => {\r\n                //smoothing mouse animation\r\n                element.customVars.lastMouse.x +=\r\n                    (mouse.x - element.customVars.lastMouse.x) * 0.05;\r\n\r\n                element.customVars.lastMouse.y +=\r\n                    (mouse.y - element.customVars.lastMouse.y) * 0.05;\r\n\r\n                //move points overtime in a circular motion\r\n                element.customVars.radians += element.customVars.velocity;\r\n\r\n                element.position.x =\r\n                    element.customVars.lastMouse.x +\r\n                    Math.cos(element.customVars.radians) *\r\n                        element.customVars.distanceFromCenter;\r\n                element.position.y =\r\n                    element.customVars.lastMouse.y +\r\n                    Math.sin(element.customVars.radians) *\r\n                        element.customVars.distanceFromCenter;\r\n\r\n                element.draw();\r\n            },\r\n        });\r\n    }\r\n\r\n    scene.drawRect({\r\n        name: 'fadingEffect',\r\n        position: { x: 0, y: 0 },\r\n        size: { x: scene.canvas.width, y: scene.canvas.height },\r\n        color: 'rgba(255,255,255, 0.05)',\r\n    });\r\n\r\n    scene.startAnimation(\r\n        300,\r\n        () => {\r\n            scene.elements.forEach((element) => element.update(element));\r\n        },\r\n        false\r\n    );\r\n}\r\n","import scene from './engine/engine.js';\r\n\r\nexport default function animation4() {\r\n    const animationNum = 4;\r\n    console.log(`Animation ${animationNum}`);\r\n    let hasAnimaitonBeenSeen = false;\r\n    localStorage\r\n        .getItem('animations')\r\n        .split('&')\r\n        .forEach((animation) => {\r\n            if (animation === `${animationNum}`) {\r\n                hasAnimaitonBeenSeen = true;\r\n            }\r\n        });\r\n    if (\r\n        localStorage.getItem('animations') == null ||\r\n        localStorage.getItem('animations') === ''\r\n    ) {\r\n        localStorage.setItem('animations', animationNum);\r\n    } else if (!hasAnimaitonBeenSeen) {\r\n        localStorage.setItem(\r\n            'animations',\r\n            `${localStorage.getItem('animations')}&${animationNum}`\r\n        );\r\n    }\r\n\r\n    scene.start({\r\n        sceneParent: document.body,\r\n        width: innerWidth,\r\n        height: innerHeight,\r\n    });\r\n\r\n    window.addEventListener('mousemove', (e) => {\r\n        mouse.x = e.clientX;\r\n        mouse.y = e.clientY;\r\n    });\r\n\r\n    let mouse = {\r\n        x: scene.canvas.width / 2,\r\n        y: scene.canvas.height / 2,\r\n    };\r\n\r\n    const colorArray = ['#d9d2ea', '#4c0490', '#36026a', '#6206b6', '#7b6b92'];\r\n    const ballCount = {\r\n        x: scene.canvas.width / 25,\r\n        y: scene.canvas.height / 25,\r\n    };\r\n\r\n    //drawing before timer starts\r\n\r\n    //drawing one row\r\n    for (let i = 0; i < ballCount.x; i++) {\r\n        const minRadius = 5;\r\n        const maxRadius = 10;\r\n\r\n        scene.drawArc({\r\n            position: {\r\n                x: minRadius * i + i * 20 + 11,\r\n                y: scene.canvas.height + minRadius,\r\n            },\r\n            radius: minRadius,\r\n            startAng: 0,\r\n            endAng: Math.PI * 2,\r\n            fill: colorArray[Math.floor(Math.random() * colorArray.length)],\r\n            update: (e) => {\r\n                if (e.position.y < 0 - minRadius) {\r\n                    e.delete();\r\n                }\r\n\r\n                if (\r\n                    scene.math.getDistance(\r\n                        e.position.x,\r\n                        e.position.y,\r\n                        mouse.x,\r\n                        mouse.y\r\n                    ) < 100 &&\r\n                    e.radius < maxRadius\r\n                ) {\r\n                    e.radius++;\r\n                } else if (e.radius > minRadius) {\r\n                    e.radius--;\r\n                }\r\n\r\n                e.position.y -= 3;\r\n\r\n                e.draw();\r\n            },\r\n        });\r\n    }\r\n\r\n    //drawing one column\r\n    for (let i = 0; i < ballCount.y; i++) {\r\n        const minRadius = 5;\r\n        const maxRadius = 10;\r\n\r\n        scene.drawArc({\r\n            position: {\r\n                x: 0,\r\n                y: minRadius * i + i * 20 + 11,\r\n            },\r\n            radius: minRadius,\r\n            startAng: 0,\r\n            endAng: Math.PI * 2,\r\n            fill: colorArray[Math.floor(Math.random() * colorArray.length)],\r\n            update: (e) => {\r\n                if (e.position.x > scene.canvas.width - minRadius) {\r\n                    e.delete();\r\n                }\r\n\r\n                if (\r\n                    scene.math.getDistance(\r\n                        e.position.x,\r\n                        e.position.y,\r\n                        mouse.x,\r\n                        mouse.y\r\n                    ) < 100 &&\r\n                    e.radius < maxRadius\r\n                ) {\r\n                    e.radius++;\r\n                } else if (e.radius > minRadius) {\r\n                    e.radius--;\r\n                }\r\n\r\n                e.position.x += 3;\r\n\r\n                e.draw();\r\n            },\r\n        });\r\n    }\r\n\r\n    //interval for drawing rows\r\n    setInterval(() => {\r\n        //drawing one row\r\n        for (let i = 0; i < ballCount.x; i++) {\r\n            const minRadius = 5;\r\n            const maxRadius = 10;\r\n\r\n            scene.drawArc({\r\n                position: {\r\n                    x: minRadius * i + i * 20 + 11,\r\n                    y: scene.canvas.height + minRadius,\r\n                },\r\n                radius: minRadius,\r\n                startAng: 0,\r\n                endAng: Math.PI * 2,\r\n                fill: colorArray[Math.floor(Math.random() * colorArray.length)],\r\n                update: (e) => {\r\n                    if (e.position.y < 0 - minRadius) {\r\n                        e.delete();\r\n                    }\r\n\r\n                    if (\r\n                        scene.math.getDistance(\r\n                            e.position.x,\r\n                            e.position.y,\r\n                            mouse.x,\r\n                            mouse.y\r\n                        ) < 100 &&\r\n                        e.radius < maxRadius\r\n                    ) {\r\n                        e.radius++;\r\n                    } else if (e.radius > minRadius) {\r\n                        e.radius--;\r\n                    }\r\n\r\n                    e.position.y -= 3;\r\n\r\n                    e.draw();\r\n                },\r\n            });\r\n        }\r\n\r\n        //drawing one column\r\n        for (let i = 0; i < ballCount.y; i++) {\r\n            const minRadius = 5;\r\n            const maxRadius = 10;\r\n\r\n            scene.drawArc({\r\n                position: {\r\n                    x: 0,\r\n                    y: minRadius * i + i * 20 + 11,\r\n                },\r\n                radius: minRadius,\r\n                startAng: 0,\r\n                endAng: Math.PI * 2,\r\n                fill: colorArray[Math.floor(Math.random() * colorArray.length)],\r\n                update: (e) => {\r\n                    if (e.position.x > scene.canvas.width - minRadius) {\r\n                        e.delete();\r\n                    }\r\n\r\n                    if (\r\n                        scene.math.getDistance(\r\n                            e.position.x,\r\n                            e.position.y,\r\n                            mouse.x,\r\n                            mouse.y\r\n                        ) < 100 &&\r\n                        e.radius < maxRadius\r\n                    ) {\r\n                        e.radius++;\r\n                    } else if (e.radius > minRadius) {\r\n                        e.radius--;\r\n                    }\r\n\r\n                    e.position.x += 3;\r\n\r\n                    e.draw();\r\n                },\r\n            });\r\n        }\r\n    }, 3000);\r\n\r\n    scene.startAnimation(60);\r\n}\r\n","import scene from './engine/engine.js';\r\n\r\nexport default function animation5() {\r\n    const animationNum = 5;\r\n    console.log(`Animation ${animationNum}`);\r\n    let hasAnimaitonBeenSeen = false;\r\n    localStorage\r\n        .getItem('animations')\r\n        .split('&')\r\n        .forEach((animation) => {\r\n            if (animation === `${animationNum}`) {\r\n                hasAnimaitonBeenSeen = true;\r\n            }\r\n        });\r\n    if (\r\n        localStorage.getItem('animations') == null ||\r\n        localStorage.getItem('animations') === ''\r\n    ) {\r\n        localStorage.setItem('animations', animationNum);\r\n    } else if (!hasAnimaitonBeenSeen) {\r\n        localStorage.setItem(\r\n            'animations',\r\n            `${localStorage.getItem('animations')}&${animationNum}`\r\n        );\r\n    }\r\n\r\n    scene.start({\r\n        sceneParent: document.body,\r\n        width: innerWidth,\r\n        height: innerHeight,\r\n    });\r\n\r\n    window.addEventListener('mousemove', (e) => {\r\n        mouse.x = e.clientX;\r\n        mouse.y = e.clientY;\r\n    });\r\n\r\n    let mouse = {\r\n        x: -100,\r\n        y: 100,\r\n    };\r\n\r\n    const colorArray = ['#d9d2ea', '#4c0490', '#36026a', '#6206b6', '#7b6b92'];\r\n    const ballCount = scene.canvas.height / 120;\r\n\r\n    for (let i = 0; i < ballCount; i++) {\r\n        let ballOffset = 10;\r\n        let radius = 30;\r\n\r\n        scene.drawArc({\r\n            position: {\r\n                x: scene.canvas.width / 2,\r\n                y: i * radius * 4 + radius + ballOffset,\r\n            },\r\n            radius: 30,\r\n            startAng: 0,\r\n            endAng: Math.PI * 2,\r\n            fill: colorArray[Math.floor(Math.random() * colorArray.length)],\r\n            customVars: { velocity: scene.canvas.width / 200, bounceTimer: 0 },\r\n            update: (e) => {\r\n                if (e.position.x + e.radius >= scene.canvas.width) {\r\n                    e.customVars.velocity = -e.customVars.velocity;\r\n                    e.fill =\r\n                        colorArray[\r\n                            Math.floor(Math.random() * colorArray.length)\r\n                        ];\r\n                } else if (e.position.x - e.radius <= 0) {\r\n                    e.customVars.velocity = -e.customVars.velocity;\r\n                    e.fill =\r\n                        colorArray[\r\n                            Math.floor(Math.random() * colorArray.length)\r\n                        ];\r\n                } else if (\r\n                    scene.math.getDistance(\r\n                        e.position.x,\r\n                        e.position.y,\r\n                        mouse.x,\r\n                        mouse.y\r\n                    ) <= radius &&\r\n                    e.customVars.bounceTimer === 0\r\n                ) {\r\n                    e.customVars.bounceTimer = 144 / 3;\r\n                    e.customVars.velocity = -e.customVars.velocity;\r\n                    e.fill =\r\n                        colorArray[\r\n                            Math.floor(Math.random() * colorArray.length)\r\n                        ];\r\n                }\r\n\r\n                if (e.customVars.bounceTimer > 0) e.customVars.bounceTimer--;\r\n                e.position.x += e.customVars.velocity;\r\n\r\n                e.draw();\r\n            },\r\n        });\r\n    }\r\n\r\n    scene.drawRect({\r\n        name: 'fadingEffect',\r\n        position: { x: 0, y: 0 },\r\n        size: { x: scene.canvas.width, y: scene.canvas.height },\r\n        color: 'rgba(255,255,255, 0.05)',\r\n    });\r\n\r\n    scene.startAnimation(\r\n        144,\r\n        () => {\r\n            scene.elements.forEach((element) => {\r\n                element.update(element);\r\n            });\r\n        },\r\n        false\r\n    );\r\n}\r\n","import animationCount from './animationCount.js';\r\nimport animation1 from './animation1.js';\r\nimport animation2 from './animation2.js';\r\nimport animation3 from './animation3.js';\r\nimport animation4 from './animation4.js';\r\nimport animation5 from './animation5.js';\r\n\r\nconst animations = [animation1, animation2, animation3, animation4, animation5];\r\nconst animation = Math.floor(Math.random() * animations.length);\r\n\r\nfunction onLoad() {\r\n    if (localStorage.getItem('animations') == null) {\r\n        localStorage.setItem('animations', '');\r\n    }\r\n\r\n    animations[animation]();\r\n    animationCount(animations.length);\r\n}\r\n\r\nwindow.onload = onLoad;\r\n"]}