{"version":3,"sources":["engine/engine.js","example.js"],"names":["scene","canvas","document","createElement","elements","clear","context","clearRect","width","height","start","data","getContext","handleColor","color","drawRect","push","Rect","name","positionX","positionY","sizeX","sizeY","update","position","x","y","size","fillStyle","draw","fillRect","forEach","element","drawPath","Path","startPos","paths","beginPath","moveTo","path","lineTo","strokeStyle","stroke","drawArc","drawCounterClockWise","Arc","radius","startAng","endAng","fill","arc","findElementByName","foundElement","i","startAnimation","frameRate","animation","setInterval","sceneParent","append","startGame","body","mouse","colorArray","window","addEventListener","e","ballCount","vx","Math","random","vy","minRadius","maxRadius","PI","floor","length","onload"],"mappings":"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","file":"example.f4545848.js","sourceRoot":"..","sourcesContent":["let scene = {\r\n  canvas: document.createElement('canvas'),\r\n  elements: [],\r\n  clear: () => {\r\n    scene.context.clearRect(0, 0, scene.canvas.width, scene.canvas.height);\r\n  },\r\n  start: (data) => {\r\n    //setting up canvas\r\n    scene.canvas.width = data.width;\r\n    scene.canvas.height = data.height;\r\n    scene.context = scene.canvas.getContext('2d');\r\n    const context = scene.context;\r\n\r\n    //handling functions\r\n\r\n    scene.handleColor = (color) => {\r\n      return color == null || color === '' ? 'black' : color;\r\n    };\r\n    const handleColor = scene.handleColor;\r\n\r\n    //drawing functions\r\n    //drawing rectangle\r\n    scene.drawRect = (data) => {\r\n      function Rect(name, positionX, positionY, sizeX, sizeY, color, update) {\r\n        this.name = name;\r\n        this.position = { x: positionX, y: positionY };\r\n        this.size = { x: sizeX, y: sizeY };\r\n        this.color = handleColor(data.color);\r\n\r\n        context.fillStyle = this.color;\r\n\r\n        this.draw = () => {\r\n          context.fillRect(\r\n            this.position.x,\r\n            this.position.y,\r\n            this.size.x,\r\n            this.size.y\r\n          );\r\n        };\r\n\r\n        this.update =\r\n          update == null\r\n            ? () => {\r\n                this.draw();\r\n              }\r\n            : update;\r\n      }\r\n\r\n      scene.elements.push(\r\n        new Rect(\r\n          data.name,\r\n          data.position.x,\r\n          data.position.y,\r\n          data.size.x,\r\n          data.size.y,\r\n          data.color,\r\n          data.update\r\n        )\r\n      );\r\n\r\n      //drawing everything on the scene\r\n      scene.elements.forEach((element) => element.draw());\r\n    };\r\n\r\n    //drawing line\r\n    scene.drawPath = (data) => {\r\n      //handling color\r\n      data.color = handleColor(data.color);\r\n\r\n      function Path(name, startPos, paths, color, update) {\r\n        this.name = name;\r\n        this.startPos = startPos;\r\n        this.paths = paths;\r\n        this.color = color;\r\n\r\n        this.draw = () => {\r\n          context.beginPath();\r\n          context.moveTo(startPos.x, startPos.y);\r\n          data.paths.forEach((path) => {\r\n            context.lineTo(path.x, path.y);\r\n          });\r\n\r\n          context.strokeStyle = color;\r\n\r\n          context.stroke();\r\n        };\r\n\r\n        this.update =\r\n          update == null\r\n            ? () => {\r\n                this.draw();\r\n              }\r\n            : update;\r\n      }\r\n\r\n      scene.elements.push(\r\n        new Path(data.name, data.startPos, data.paths, data.color, data.update)\r\n      );\r\n\r\n      //drawing everything on the scene\r\n      scene.elements.forEach((element) => element.draw());\r\n    };\r\n\r\n    //drawing arc\r\n    scene.drawArc = (data) => {\r\n      data.drawCounterClockWise =\r\n        data.drawCounterClockWise == null ? false : data.drawCounterClockWise;\r\n\r\n      function Arc(\r\n        name,\r\n        position,\r\n        radius,\r\n        startAng,\r\n        endAng,\r\n        drawCounterClockWise,\r\n        color,\r\n        fill,\r\n        update\r\n      ) {\r\n        this.name = name;\r\n        this.position = position;\r\n        this.radius = radius;\r\n        this.startAng = startAng;\r\n        this.endAng = endAng;\r\n        this.drawCounterClockWise = drawCounterClockWise;\r\n        this.color = color;\r\n        this.fill = fill;\r\n\r\n        this.draw = () => {\r\n          context.beginPath();\r\n          context.arc(\r\n            this.position.x,\r\n            this.position.y,\r\n            this.radius,\r\n            this.startAng,\r\n            this.endAng,\r\n            this.drawCounterClockWise\r\n          );\r\n          if (this.color != null) {\r\n            context.strokeStyle = this.color;\r\n            context.stroke();\r\n          }\r\n          if (this.fill != null) {\r\n            context.fillStyle = this.fill;\r\n            context.fill();\r\n          }\r\n        };\r\n\r\n        this.update =\r\n          update == null\r\n            ? () => {\r\n                this.draw();\r\n              }\r\n            : update;\r\n      }\r\n\r\n      scene.elements.push(\r\n        new Arc(\r\n          data.name,\r\n          data.position,\r\n          data.radius,\r\n          data.startAng,\r\n          data.endAng,\r\n          data.drawCounterClockWise,\r\n          data.color,\r\n          data.fill,\r\n          data.update\r\n        )\r\n      );\r\n\r\n      //finding functions\r\n      scene.findElementByName = (name) => {\r\n        let foundElement = false;\r\n        let i = 0;\r\n\r\n        scene.elements.forEach((element) => {\r\n          if (element.name === name) {\r\n            foundElement = true;\r\n          } else if (foundElement === false) {\r\n            i++;\r\n          }\r\n        });\r\n\r\n        if (foundElement === true) {\r\n          return scene.elements[i];\r\n        } else {\r\n          return null;\r\n        }\r\n      };\r\n\r\n      //drawing everything on the scene\r\n      scene.elements.forEach((element) => element.draw());\r\n    };\r\n\r\n    //animation functions\r\n    scene.startAnimation = (frameRate, animation) => {\r\n      setInterval(() => {\r\n        scene.clear();\r\n        if (animation != null) {\r\n          animation();\r\n        }\r\n        //drawing everything on the scene\r\n        scene.elements.forEach((element) => element.update(element));\r\n      }, 1000 / frameRate);\r\n    };\r\n\r\n    //appending canvas into the DOM\r\n    data.sceneParent.append(scene.canvas);\r\n  },\r\n};\r\n\r\nexport default scene;\r\n","import scene from './engine/engine.js';\r\n\r\nfunction startGame() {\r\n  scene.start({\r\n    sceneParent: document.body,\r\n    width: 800,\r\n    height: 600,\r\n  });\r\n\r\n  let mouse = {\r\n    x: null,\r\n    y: null,\r\n  };\r\n\r\n  const colorArray = ['#d9d2ea', '#4c0490', '#36026a', '#6206b6', '#7b6b92'];\r\n\r\n  window.addEventListener('mousemove', (e) => {\r\n    mouse.x = e.x;\r\n    mouse.y = e.y;\r\n  });\r\n\r\n  const ballCount = 800;\r\n\r\n  for (let i = 0; ballCount > i; i++) {\r\n    let vx = (Math.random() - 0.5) * 2;\r\n    let vy = (Math.random() - 0.5) * 2;\r\n    let minRadius = Math.random() * 6 + 2;\r\n    let maxRadius = Math.random() * 30 + 20;\r\n    let interactionDistance = 50;\r\n\r\n    scene.drawArc({\r\n      position: {\r\n        x: Math.random() * scene.canvas.width - 30,\r\n        y: Math.random() * scene.canvas.height - 30,\r\n      },\r\n      radius: minRadius,\r\n      startAng: 0,\r\n      endAng: Math.PI * 2,\r\n      fill: colorArray[Math.floor(Math.random() * colorArray.length)],\r\n      update: (element) => {\r\n        if (\r\n          element.position.x + element.radius > scene.canvas.width ||\r\n          element.position.x - element.radius < 0\r\n        ) {\r\n          vx = -vx;\r\n        }\r\n        if (\r\n          element.position.y + element.radius > scene.canvas.height ||\r\n          element.position.y - element.radius < 0\r\n        ) {\r\n          vy = -vy;\r\n        }\r\n\r\n        element.position.x += vx;\r\n        element.position.y += vy;\r\n\r\n        //interaction\r\n        if (\r\n          mouse.x - element.position.x < interactionDistance &&\r\n          mouse.x - element.position.x > -interactionDistance &&\r\n          mouse.y - element.position.y < interactionDistance &&\r\n          mouse.y - element.position.y > -interactionDistance &&\r\n          element.radius < maxRadius\r\n        ) {\r\n          element.radius++;\r\n        } else if (element.radius > minRadius) {\r\n          element.radius--;\r\n        }\r\n\r\n        element.draw();\r\n      },\r\n    });\r\n  }\r\n\r\n  scene.startAnimation(60);\r\n}\r\n\r\ndocument.body.onload = startGame();\r\n"]}