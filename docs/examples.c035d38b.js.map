{"version":3,"sources":["engine/engine.js","animation1.js","animation2.js","animation3.js","animation4.js","animation5.js","examples.js"],"names":["scene","canvas","document","createElement","elements","math","randomIntFromRange","min","max","Math","random","randomColor","getDistance","x1","y1","x2","y2","xDistance","yDistance","sqrt","pow","clear","context","clearRect","width","height","animationClear","start","data","getContext","handleColor","color","id","drawRect","push","Rect","name","positionX","positionY","sizeX","sizeY","update","customVars","position","x","y","size","draw","fillStyle","fillRect","delete","foundElement","index","forEach","element","splice","drawPath","Path","startPos","paths","beginPath","moveTo","path","lineTo","strokeStyle","stroke","drawArc","drawCounterClockWise","Arc","radius","startAng","endAng","fill","arc","drawText","Text","text","family","String","substr","lenth","font","fillText","getElementByName","i","getElementById","startAnimation","frameRate","animation","extras","setInterval","sceneParent","append","animation1","body","innerWidth","innerHeight","mouse","colorArray","window","addEventListener","e","ballCount","floor","vx","vy","minRadius","maxRadius","PI","length","animation2","bounciness","animation3","clientX","clientY","radians","velocity","distanceFromCenter","lastMouse","cos","sin","animation4","animation5","bounceTimer","animations","onload"],"mappings":"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","file":"examples.c035d38b.js","sourceRoot":"..","sourcesContent":["let scene = {\r\n    canvas: document.createElement('canvas'),\r\n    elements: [],\r\n    math: {\r\n        randomIntFromRange: (min, max) => {\r\n            return Math.random() * (max - min) + min;\r\n        },\r\n        randomColor: () => {\r\n            return `rgb(${Math.random() * 255}, ${Math.random() * 255}, ${\r\n                Math.random() * 255\r\n            }`;\r\n        },\r\n        getDistance: (x1, y1, x2, y2) => {\r\n            let xDistance = x2 - x1;\r\n            let yDistance = y2 - y1;\r\n\r\n            return Math.sqrt(Math.pow(xDistance, 2) + Math.pow(yDistance, 2));\r\n        },\r\n    },\r\n    clear: () => {\r\n        scene.context.clearRect(0, 0, scene.canvas.width, scene.canvas.height);\r\n    },\r\n    animationClear: () => {\r\n        scene.clear();\r\n    },\r\n    start: (data) => {\r\n        //setting up canvas\r\n        if (data.width != null) {\r\n            scene.canvas.width = data.width;\r\n        }\r\n        if (data.height != null) {\r\n            scene.canvas.height = data.height;\r\n        }\r\n        scene.context = scene.canvas.getContext('2d');\r\n        const context = scene.context;\r\n\r\n        //handling functions\r\n        scene.handleColor = (color) => {\r\n            return color == null || color === '' ? 'black' : color;\r\n        };\r\n        const handleColor = scene.handleColor;\r\n\r\n        let id = 0;\r\n\r\n        //drawing functions\r\n        //drawing rectangle\r\n        scene.drawRect = (data) => {\r\n            function Rect(\r\n                name,\r\n                positionX,\r\n                positionY,\r\n                sizeX,\r\n                sizeY,\r\n                color,\r\n                update,\r\n                customVars\r\n            ) {\r\n                this.name = name;\r\n                this.position = { x: positionX, y: positionY };\r\n                this.size = { x: sizeX, y: sizeY };\r\n                this.color = handleColor(color);\r\n                this.customVars = customVars;\r\n\r\n                this.id = id;\r\n                id += 1;\r\n\r\n                this.draw = () => {\r\n                    context.fillStyle = this.color;\r\n                    context.fillRect(\r\n                        this.position.x,\r\n                        this.position.y,\r\n                        this.size.x,\r\n                        this.size.y\r\n                    );\r\n                };\r\n\r\n                this.update =\r\n                    update == null\r\n                        ? () => {\r\n                              this.draw();\r\n                          }\r\n                        : update;\r\n\r\n                this.delete = () => {\r\n                    let foundElement = false;\r\n                    let index = 0;\r\n                    scene.elements.forEach((element) => {\r\n                        if (element.id === this.id || foundElement === true) {\r\n                            foundElement = true;\r\n                        } else {\r\n                            index++;\r\n                        }\r\n                    });\r\n\r\n                    scene.elements.splice(index, 1);\r\n                };\r\n            }\r\n\r\n            scene.elements.push(\r\n                new Rect(\r\n                    data.name,\r\n                    data.position.x,\r\n                    data.position.y,\r\n                    data.size.x,\r\n                    data.size.y,\r\n                    data.color,\r\n                    data.update,\r\n                    data.customVars\r\n                )\r\n            );\r\n\r\n            //drawing everything on the scene\r\n            scene.elements.forEach((element) => element.draw());\r\n        };\r\n\r\n        //drawing line\r\n        scene.drawPath = (data) => {\r\n            //handling color\r\n            data.color = handleColor(data.color);\r\n\r\n            function Path(name, startPos, paths, color, update, customVars) {\r\n                this.name = name;\r\n                this.startPos = startPos;\r\n                this.paths = paths;\r\n                this.color = color;\r\n                this.customVars = customVars;\r\n\r\n                this.id = id;\r\n                id += 1;\r\n\r\n                this.draw = () => {\r\n                    context.beginPath();\r\n                    context.moveTo(startPos.x, startPos.y);\r\n                    data.paths.forEach((path) => {\r\n                        context.lineTo(path.x, path.y);\r\n                    });\r\n\r\n                    context.strokeStyle = color;\r\n\r\n                    context.stroke();\r\n                };\r\n\r\n                this.update =\r\n                    update == null\r\n                        ? () => {\r\n                              this.draw();\r\n                          }\r\n                        : update;\r\n\r\n                this.delete = () => {\r\n                    let foundElement = false;\r\n                    let index = 0;\r\n                    scene.elements.forEach((element) => {\r\n                        if (element.id === this.id || foundElement === true) {\r\n                            foundElement = true;\r\n                        } else {\r\n                            index++;\r\n                        }\r\n                    });\r\n\r\n                    scene.elements.splice(index, 1);\r\n                };\r\n            }\r\n\r\n            scene.elements.push(\r\n                new Path(\r\n                    data.name,\r\n                    data.startPos,\r\n                    data.paths,\r\n                    data.color,\r\n                    data.update,\r\n                    data.customVars\r\n                )\r\n            );\r\n\r\n            //drawing everything on the scene\r\n            scene.elements.forEach((element) => element.draw());\r\n        };\r\n\r\n        //drawing arc\r\n        scene.drawArc = (data) => {\r\n            data.drawCounterClockWise =\r\n                data.drawCounterClockWise == null\r\n                    ? false\r\n                    : data.drawCounterClockWise;\r\n\r\n            function Arc(\r\n                name,\r\n                position,\r\n                radius,\r\n                startAng,\r\n                endAng,\r\n                drawCounterClockWise,\r\n                color,\r\n                fill,\r\n                update,\r\n                customVars\r\n            ) {\r\n                this.name = name;\r\n                this.position = position;\r\n                this.radius = radius;\r\n                this.startAng = startAng;\r\n                this.endAng = endAng;\r\n                this.drawCounterClockWise = drawCounterClockWise;\r\n                this.color = color;\r\n                this.fill = fill;\r\n                this.customVars = customVars;\r\n\r\n                this.id = id;\r\n                id += 1;\r\n\r\n                this.draw = () => {\r\n                    context.beginPath();\r\n                    context.arc(\r\n                        this.position.x,\r\n                        this.position.y,\r\n                        this.radius,\r\n                        this.startAng,\r\n                        this.endAng,\r\n                        this.drawCounterClockWise\r\n                    );\r\n                    if (this.color != null) {\r\n                        context.strokeStyle = this.color;\r\n                        context.stroke();\r\n                    }\r\n                    if (this.fill != null) {\r\n                        context.fillStyle = this.fill;\r\n                        context.fill();\r\n                    }\r\n                };\r\n\r\n                this.update =\r\n                    update == null\r\n                        ? () => {\r\n                              this.draw();\r\n                          }\r\n                        : update;\r\n\r\n                this.delete = () => {\r\n                    let foundElement = false;\r\n                    let index = 0;\r\n                    scene.elements.forEach((element) => {\r\n                        if (element.id === this.id || foundElement === true) {\r\n                            foundElement = true;\r\n                        } else {\r\n                            index++;\r\n                        }\r\n                    });\r\n\r\n                    scene.elements.splice(index, 1);\r\n                };\r\n            }\r\n\r\n            scene.elements.push(\r\n                new Arc(\r\n                    data.name,\r\n                    data.position,\r\n                    data.radius,\r\n                    data.startAng,\r\n                    data.endAng,\r\n                    data.drawCounterClockWise,\r\n                    data.color,\r\n                    data.fill,\r\n                    data.update,\r\n                    data.customVars\r\n                )\r\n            );\r\n\r\n            //drawing everything on the scene\r\n            scene.elements.forEach((element) => element.draw());\r\n        };\r\n\r\n        //drawing text\r\n        scene.drawText = (data) => {\r\n            function Text(\r\n                name,\r\n                position,\r\n                text,\r\n                size,\r\n                family,\r\n                color,\r\n                update,\r\n                customVars\r\n            ) {\r\n                this.name = name;\r\n                this.position = position;\r\n                this.text = text;\r\n                this.size =\r\n                    String(size).substr(String(size).lenth - 2) === 'px'\r\n                        ? String(size)\r\n                        : `${size}px`;\r\n                this.family = family == null ? 'Arial' : family;\r\n                this.color = scene.handleColor(color);\r\n                this.customVars = customVars;\r\n\r\n                this.id = id;\r\n                id += 1;\r\n\r\n                this.draw = () => {\r\n                    context.font = `${this.size} ${this.family}`;\r\n                    context.fillStyle = this.color;\r\n                    context.fillText(\r\n                        this.text,\r\n                        this.position.x,\r\n                        this.position.y\r\n                    );\r\n                };\r\n\r\n                this.update =\r\n                    update == null\r\n                        ? () => {\r\n                              this.draw();\r\n                          }\r\n                        : update;\r\n\r\n                this.delete = () => {\r\n                    let foundElement = false;\r\n                    let index = 0;\r\n                    scene.elements.forEach((element) => {\r\n                        if (element.id === this.id || foundElement === true) {\r\n                            foundElement = true;\r\n                        } else {\r\n                            index++;\r\n                        }\r\n                    });\r\n\r\n                    scene.elements.splice(index, 1);\r\n                };\r\n            }\r\n\r\n            scene.elements.push(\r\n                new Text(\r\n                    data.name,\r\n                    data.position,\r\n                    data.text,\r\n                    data.size,\r\n                    data.family,\r\n                    data.color,\r\n                    data.update,\r\n                    data.customVars\r\n                )\r\n            );\r\n\r\n            //drawing everything on the scene\r\n            scene.elements.forEach((element) => element.draw());\r\n        };\r\n\r\n        //finding functions\r\n        scene.getElementByName = (name) => {\r\n            let foundElement = false;\r\n            let i = 0;\r\n\r\n            scene.elements.forEach((element) => {\r\n                if (element.name === name) {\r\n                    foundElement = true;\r\n                } else if (foundElement === false) {\r\n                    i++;\r\n                }\r\n            });\r\n\r\n            if (foundElement === true) {\r\n                return scene.elements[i];\r\n            } else {\r\n                return null;\r\n            }\r\n        };\r\n\r\n        scene.getElementById = (id) => {\r\n            let foundElement = false;\r\n            let i = 0;\r\n\r\n            scene.elements.forEach((element) => {\r\n                if (element.id === id) {\r\n                    foundElement = true;\r\n                } else if (foundElement === false) {\r\n                    i++;\r\n                }\r\n            });\r\n\r\n            if (foundElement === true) {\r\n                return scene.elements[i];\r\n            } else {\r\n                return null;\r\n            }\r\n        };\r\n\r\n        //animation functions\r\n        scene.startAnimation = (frameRate, animation, extras) => {\r\n            setInterval(() => {\r\n                if (extras === true || extras == null) {\r\n                    scene.animationClear();\r\n                    if (animation != null) {\r\n                        animation();\r\n                    }\r\n                    //drawing everything on the scene\r\n                    scene.elements.forEach((element) =>\r\n                        element.update(element)\r\n                    );\r\n                } else {\r\n                    if (animation != null) {\r\n                        animation();\r\n                    }\r\n                }\r\n            }, 1000 / frameRate);\r\n        };\r\n\r\n        //appending canvas into the DOM\r\n        data.sceneParent.append(scene.canvas);\r\n    },\r\n};\r\n\r\nexport default scene;\r\n","import scene from './engine/engine.js';\r\n\r\nexport default function animation1() {\r\n    scene.start({\r\n        sceneParent: document.body,\r\n        width: innerWidth,\r\n        height: innerHeight,\r\n    });\r\n\r\n    let mouse = {\r\n        x: -100,\r\n        y: -100,\r\n    };\r\n\r\n    const colorArray = ['#d9d2ea', '#4c0490', '#36026a', '#6206b6', '#7b6b92'];\r\n\r\n    window.addEventListener('mousemove', (e) => {\r\n        mouse.x = e.x;\r\n        mouse.y = e.y;\r\n    });\r\n\r\n    const ballCount = Math.floor(innerWidth / 2);\r\n\r\n    for (let i = 0; ballCount > i; i++) {\r\n        let vx = (Math.random() - 0.5) * 2;\r\n        let vy = (Math.random() - 0.5) * 2;\r\n        let minRadius = scene.math.randomIntFromRange(2, 8);\r\n        let maxRadius = scene.math.randomIntFromRange(20, 30);\r\n        let interactionDistance = 50;\r\n        let mass = 1;\r\n\r\n        scene.drawArc({\r\n            position: {\r\n                x: scene.math.randomIntFromRange(30, scene.canvas.width - 30),\r\n                y: scene.math.randomIntFromRange(30, scene.canvas.height - 30),\r\n            },\r\n            radius: minRadius,\r\n            startAng: 0,\r\n            endAng: Math.PI * 2,\r\n            fill: colorArray[Math.floor(Math.random() * colorArray.length)],\r\n            update: (element) => {\r\n                if (\r\n                    element.position.x + element.radius > scene.canvas.width ||\r\n                    element.position.x - element.radius < 0\r\n                ) {\r\n                    vx = -vx;\r\n                }\r\n                if (\r\n                    element.position.y + element.radius > scene.canvas.height ||\r\n                    element.position.y - element.radius < 0\r\n                ) {\r\n                    vy = -vy;\r\n                }\r\n\r\n                element.position.x += vx;\r\n                element.position.y += vy;\r\n\r\n                //interaction\r\n                if (\r\n                    mouse.x - element.position.x < interactionDistance &&\r\n                    mouse.x - element.position.x > -interactionDistance &&\r\n                    mouse.y - element.position.y < interactionDistance &&\r\n                    mouse.y - element.position.y > -interactionDistance &&\r\n                    element.radius < maxRadius\r\n                ) {\r\n                    element.radius++;\r\n                } else if (element.radius > minRadius) {\r\n                    element.radius--;\r\n                }\r\n\r\n                element.draw();\r\n            },\r\n        });\r\n    }\r\n\r\n    scene.startAnimation(60, () => {\r\n        scene.canvas.width = innerWidth;\r\n        scene.canvas.height = innerHeight;\r\n    });\r\n}\r\n","import scene from './engine/engine.js';\r\n\r\nexport default function animation2() {\r\n    scene.start({\r\n        sceneParent: document.body,\r\n        width: innerWidth,\r\n        height: innerHeight,\r\n    });\r\n\r\n    const colorArray = ['#d9d2ea', '#4c0490', '#36026a', '#6206b6', '#7b6b92'];\r\n    const ballCount = Math.floor(innerWidth / 5);\r\n\r\n    for (let i = 0; i < ballCount; i++) {\r\n        let vy = 1;\r\n        let vx = (Math.random() - 0.5) * 10;\r\n        let gravity = 1;\r\n        let bounciness = 0.99 + Math.random() / 100;\r\n\r\n        scene.drawArc({\r\n            position: {\r\n                x: scene.math.randomIntFromRange(30, scene.canvas.width - 30),\r\n                y: scene.math.randomIntFromRange(30, scene.canvas.height - 30),\r\n            },\r\n            radius: scene.math.randomIntFromRange(20, 40),\r\n            startAng: 0,\r\n            endAng: Math.PI * 2,\r\n            color: 'black',\r\n            fill: colorArray[Math.floor(Math.random() * colorArray.length)],\r\n            update: (element) => {\r\n                if (\r\n                    element.position.y + element.radius + vy >\r\n                    scene.canvas.height\r\n                ) {\r\n                    vy = -vy * bounciness;\r\n                } else {\r\n                    vy += gravity;\r\n                }\r\n\r\n                if (\r\n                    element.position.x + element.radius + vx >\r\n                        scene.canvas.width ||\r\n                    element.position.x - element.radius + vx < 0\r\n                ) {\r\n                    vx = -vx;\r\n                }\r\n\r\n                element.position.x += vx;\r\n                element.position.y += vy;\r\n                element.draw();\r\n            },\r\n        });\r\n    }\r\n\r\n    scene.startAnimation(60, () => {\r\n        scene.canvas.width = innerWidth;\r\n        scene.canvas.height = innerHeight;\r\n    });\r\n}\r\n","import scene from './engine/engine.js';\r\n\r\nexport default function animation3() {\r\n    scene.start({\r\n        sceneParent: document.body,\r\n        width: innerWidth,\r\n        height: innerHeight,\r\n    });\r\n\r\n    window.addEventListener('mousemove', (e) => {\r\n        mouse.x = e.clientX;\r\n        mouse.y = e.clientY;\r\n    });\r\n\r\n    let mouse = {\r\n        x: scene.canvas.width / 2,\r\n        y: scene.canvas.height / 2,\r\n    };\r\n\r\n    const colorArray = ['#d9d2ea', '#4c0490', '#36026a', '#6206b6', '#7b6b92'];\r\n    const ballCount = innerWidth / 20;\r\n\r\n    for (let i = 0; i < ballCount; i++) {\r\n        scene.drawArc({\r\n            position: { x: scene.canvas.width / 2, y: scene.canvas.height / 2 },\r\n            radius: scene.math.randomIntFromRange(5, 8),\r\n            startAng: 0,\r\n            endAng: Math.PI * 2,\r\n            customVars: {\r\n                radians: Math.random() * Math.PI * 2,\r\n                velocity: 0.01,\r\n                distanceFromCenter: scene.math.randomIntFromRange(\r\n                    20,\r\n                    innerWidth / 2\r\n                ),\r\n                lastMouse: {\r\n                    x: scene.canvas.width / 2,\r\n                    y: scene.canvas.height / 2,\r\n                },\r\n            },\r\n            fill: colorArray[Math.floor(Math.random() * colorArray.length)],\r\n            update: (element) => {\r\n                //smoothing mouse animation\r\n                element.customVars.lastMouse.x +=\r\n                    (mouse.x - element.customVars.lastMouse.x) * 0.05;\r\n\r\n                element.customVars.lastMouse.y +=\r\n                    (mouse.y - element.customVars.lastMouse.y) * 0.05;\r\n\r\n                //move points overtime in a circular motion\r\n                element.customVars.radians += element.customVars.velocity;\r\n\r\n                element.position.x =\r\n                    element.customVars.lastMouse.x +\r\n                    Math.cos(element.customVars.radians) *\r\n                        element.customVars.distanceFromCenter;\r\n                element.position.y =\r\n                    element.customVars.lastMouse.y +\r\n                    Math.sin(element.customVars.radians) *\r\n                        element.customVars.distanceFromCenter;\r\n\r\n                element.draw();\r\n            },\r\n        });\r\n    }\r\n\r\n    scene.drawRect({\r\n        name: 'fadingEffect',\r\n        position: { x: 0, y: 0 },\r\n        size: { x: scene.canvas.width, y: scene.canvas.height },\r\n        color: 'rgba(255,255,255, 0.05)',\r\n    });\r\n\r\n    scene.startAnimation(\r\n        300,\r\n        () => {\r\n            scene.elements.forEach((element) => element.update(element));\r\n        },\r\n        false\r\n    );\r\n}\r\n","import scene from './engine/engine.js';\r\n\r\nexport default function animation4() {\r\n    scene.start({\r\n        sceneParent: document.body,\r\n        width: innerWidth,\r\n        height: innerHeight,\r\n    });\r\n\r\n    window.addEventListener('mousemove', (e) => {\r\n        mouse.x = e.clientX;\r\n        mouse.y = e.clientY;\r\n    });\r\n\r\n    let mouse = {\r\n        x: scene.canvas.width / 2,\r\n        y: scene.canvas.height / 2,\r\n    };\r\n\r\n    const colorArray = ['#d9d2ea', '#4c0490', '#36026a', '#6206b6', '#7b6b92'];\r\n    const ballCount = {\r\n        x: scene.canvas.width / 25,\r\n        y: scene.canvas.height / 25,\r\n    };\r\n\r\n    //drawing before timer starts\r\n\r\n    //drawing one row\r\n    for (let i = 0; i < ballCount.x; i++) {\r\n        const minRadius = 5;\r\n        const maxRadius = 10;\r\n\r\n        scene.drawArc({\r\n            position: {\r\n                x: minRadius * i + i * 20 + 11,\r\n                y: scene.canvas.height + minRadius,\r\n            },\r\n            radius: minRadius,\r\n            startAng: 0,\r\n            endAng: Math.PI * 2,\r\n            fill: colorArray[Math.floor(Math.random() * colorArray.length)],\r\n            update: (e) => {\r\n                if (e.position.y < 0 - minRadius) {\r\n                    e.delete();\r\n                }\r\n\r\n                if (\r\n                    scene.math.getDistance(\r\n                        e.position.x,\r\n                        e.position.y,\r\n                        mouse.x,\r\n                        mouse.y\r\n                    ) < 100 &&\r\n                    e.radius < maxRadius\r\n                ) {\r\n                    e.radius++;\r\n                } else if (e.radius > minRadius) {\r\n                    e.radius--;\r\n                }\r\n\r\n                e.position.y -= 3;\r\n\r\n                e.draw();\r\n            },\r\n        });\r\n    }\r\n\r\n    //drawing one column\r\n    for (let i = 0; i < ballCount.y; i++) {\r\n        const minRadius = 5;\r\n        const maxRadius = 10;\r\n\r\n        scene.drawArc({\r\n            position: {\r\n                x: 0,\r\n                y: minRadius * i + i * 20 + 11,\r\n            },\r\n            radius: minRadius,\r\n            startAng: 0,\r\n            endAng: Math.PI * 2,\r\n            fill: colorArray[Math.floor(Math.random() * colorArray.length)],\r\n            update: (e) => {\r\n                if (e.position.x > scene.canvas.width - minRadius) {\r\n                    e.delete();\r\n                }\r\n\r\n                if (\r\n                    scene.math.getDistance(\r\n                        e.position.x,\r\n                        e.position.y,\r\n                        mouse.x,\r\n                        mouse.y\r\n                    ) < 100 &&\r\n                    e.radius < maxRadius\r\n                ) {\r\n                    e.radius++;\r\n                } else if (e.radius > minRadius) {\r\n                    e.radius--;\r\n                }\r\n\r\n                e.position.x += 3;\r\n\r\n                e.draw();\r\n            },\r\n        });\r\n    }\r\n\r\n    //interval for drawing rows\r\n    setInterval(() => {\r\n        //drawing one row\r\n        for (let i = 0; i < ballCount.x; i++) {\r\n            const minRadius = 5;\r\n            const maxRadius = 10;\r\n\r\n            scene.drawArc({\r\n                position: {\r\n                    x: minRadius * i + i * 20 + 11,\r\n                    y: scene.canvas.height + minRadius,\r\n                },\r\n                radius: minRadius,\r\n                startAng: 0,\r\n                endAng: Math.PI * 2,\r\n                fill: colorArray[Math.floor(Math.random() * colorArray.length)],\r\n                update: (e) => {\r\n                    if (e.position.y < 0 - minRadius) {\r\n                        e.delete();\r\n                    }\r\n\r\n                    if (\r\n                        scene.math.getDistance(\r\n                            e.position.x,\r\n                            e.position.y,\r\n                            mouse.x,\r\n                            mouse.y\r\n                        ) < 100 &&\r\n                        e.radius < maxRadius\r\n                    ) {\r\n                        e.radius++;\r\n                    } else if (e.radius > minRadius) {\r\n                        e.radius--;\r\n                    }\r\n\r\n                    e.position.y -= 3;\r\n\r\n                    e.draw();\r\n                },\r\n            });\r\n        }\r\n\r\n        //drawing one column\r\n        for (let i = 0; i < ballCount.y; i++) {\r\n            const minRadius = 5;\r\n            const maxRadius = 10;\r\n\r\n            scene.drawArc({\r\n                position: {\r\n                    x: 0,\r\n                    y: minRadius * i + i * 20 + 11,\r\n                },\r\n                radius: minRadius,\r\n                startAng: 0,\r\n                endAng: Math.PI * 2,\r\n                fill: colorArray[Math.floor(Math.random() * colorArray.length)],\r\n                update: (e) => {\r\n                    if (e.position.x > scene.canvas.width - minRadius) {\r\n                        e.delete();\r\n                    }\r\n\r\n                    if (\r\n                        scene.math.getDistance(\r\n                            e.position.x,\r\n                            e.position.y,\r\n                            mouse.x,\r\n                            mouse.y\r\n                        ) < 100 &&\r\n                        e.radius < maxRadius\r\n                    ) {\r\n                        e.radius++;\r\n                    } else if (e.radius > minRadius) {\r\n                        e.radius--;\r\n                    }\r\n\r\n                    e.position.x += 3;\r\n\r\n                    e.draw();\r\n                },\r\n            });\r\n        }\r\n    }, 3000);\r\n\r\n    scene.startAnimation(60);\r\n}\r\n","import scene from './engine/engine.js';\r\n\r\nexport default function animation5() {\r\n    scene.start({\r\n        sceneParent: document.body,\r\n        width: innerWidth,\r\n        height: innerHeight,\r\n    });\r\n\r\n    window.addEventListener('mousemove', (e) => {\r\n        mouse.x = e.clientX;\r\n        mouse.y = e.clientY;\r\n    });\r\n\r\n    let mouse = {\r\n        x: -100,\r\n        y: 100,\r\n    };\r\n\r\n    const colorArray = ['#d9d2ea', '#4c0490', '#36026a', '#6206b6', '#7b6b92'];\r\n    const ballCount = scene.canvas.height / 120;\r\n\r\n    for (let i = 0; i < ballCount; i++) {\r\n        let ballOffset = 10;\r\n        let radius = 30;\r\n\r\n        scene.drawArc({\r\n            position: {\r\n                x: scene.canvas.width / 2,\r\n                y: i * radius * 4 + radius + ballOffset,\r\n            },\r\n            radius: 30,\r\n            startAng: 0,\r\n            endAng: Math.PI * 2,\r\n            fill: colorArray[Math.floor(Math.random() * colorArray.length)],\r\n            customVars: { velocity: scene.canvas.width / 200, bounceTimer: 0 },\r\n            update: (e) => {\r\n                if (e.position.x + e.radius >= scene.canvas.width) {\r\n                    e.customVars.velocity = -e.customVars.velocity;\r\n                    e.fill =\r\n                        colorArray[\r\n                            Math.floor(Math.random() * colorArray.length)\r\n                        ];\r\n                } else if (e.position.x - e.radius <= 0) {\r\n                    e.customVars.velocity = -e.customVars.velocity;\r\n                    e.fill =\r\n                        colorArray[\r\n                            Math.floor(Math.random() * colorArray.length)\r\n                        ];\r\n                } else if (\r\n                    scene.math.getDistance(\r\n                        e.position.x,\r\n                        e.position.y,\r\n                        mouse.x,\r\n                        mouse.y\r\n                    ) <= radius &&\r\n                    e.customVars.bounceTimer === 0\r\n                ) {\r\n                    e.customVars.bounceTimer = 144 / 3;\r\n                    e.customVars.velocity = -e.customVars.velocity;\r\n                    e.fill =\r\n                        colorArray[\r\n                            Math.floor(Math.random() * colorArray.length)\r\n                        ];\r\n                }\r\n\r\n                if (e.customVars.bounceTimer > 0) e.customVars.bounceTimer--;\r\n                e.position.x += e.customVars.velocity;\r\n\r\n                e.draw();\r\n            },\r\n        });\r\n    }\r\n\r\n    scene.drawRect({\r\n        name: 'fadingEffect',\r\n        position: { x: 0, y: 0 },\r\n        size: { x: scene.canvas.width, y: scene.canvas.height },\r\n        color: 'rgba(255,255,255, 0.05)',\r\n    });\r\n\r\n    scene.startAnimation(\r\n        144,\r\n        () => {\r\n            scene.elements.forEach((element) => {\r\n                element.update(element);\r\n            });\r\n        },\r\n        false\r\n    );\r\n}\r\n","import animation1 from './animation1.js';\r\nimport animation2 from './animation2.js';\r\nimport animation3 from './animation3.js';\r\nimport animation4 from './animation4.js';\r\nimport animation5 from './animation5.js';\r\n\r\nconst animations = [animation1, animation2, animation3, animation4, animation5];\r\n\r\nwindow.onload = animations[Math.floor(Math.random() * animations.length)];\r\n"]}